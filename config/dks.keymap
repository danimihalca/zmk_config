/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

#define COMBO(K0, K1, OUTPUT) \
    combo_##K0##_##K1 { \
        timeout-ms = <40>; \
        key-positions = <K0 K1>; \
        bindings = <OUTPUT>; \
    };

&lt {
    tapping-term-ms = <200>;
    quick-tap-ms = <200>;// tap tap hold will fire the tapping key continuosly 
    flavor = "tap-preferred";
};

&mt {
    tapping-term-ms = <200>;
    quick-tap-ms = <200>;// tap tap hold will fire the tapping key continuosly 
    flavor = "tap-preferred";
};

/ {
    combos {
        compatible = "zmk,combos";

        //// Keys layout
        // XX  1  2  3  4  5 |  6  7  8  9 10 XX
        // XX 13 14 15 16 17 | 18 19 20 21 22 XX
        // XX 25 26 27 28 29 | 30 31 32 33 34 XX
        // -------------------------------------
        //          36 37 38 | 39 40 41

        ////// Same side combos

        //// LH
        
        // row 0
        // COMBO(1, 2, &none)
        COMBO(2, 3, &kp LEFT_PARENTHESIS)
        COMBO(3, 4, &kp RIGHT_PARENTHESIS)
        // COMBO(4, 5, &none)

        // row 0+1
        // COMBO(1, 13, &none)
        COMBO(2, 14, &kp AT_SIGN)
        COMBO(3, 15, &kp PERIOD)
        COMBO(4, 16, &kp COLON)
        COMBO(5, 17, &kp AMPERSAND)

        // row 1
        // COMBO(13, 14, &none)
        COMBO(14, 15, &kp LEFT_BRACKET)
        COMBO(15, 16, &kp RIGHT_BRACKET)
        // COMBO(16, 17, &none)

        // row 1+2
        // COMBO(13, 25, &none)
        COMBO(14, 26, &kp PERCENT)
        COMBO(15, 27, &kp COMMA)
        COMBO(16, 28, &kp SEMICOLON)
        COMBO(17, 29, &kp PIPE)

        // row 2
        COMBO(25, 26, &kp GRAVE)
        COMBO(26, 27, &kp LEFT_BRACE)
        COMBO(27, 28, &kp RIGHT_BRACE)
        // COMBO(28, 29, &none)


        //// RH

        // row 0
        // COMBO(6, 7, &none)
        COMBO(7, 8, &kp QUESTION)
        COMBO(8, 9, &kp EXCLAMATION)
        // COMBO(9, 10, &none)

        // row 0+1
        COMBO(6, 18, &kp CARET)
        COMBO(7, 19, &kp PLUS)
        COMBO(8, 20, &kp MINUS)
        COMBO(9, 21, &kp HASH)
        // COMBO(10, 22, &none)

        // row 1
        // COMBO(18, 19, &none)
        COMBO(19, 20, &kp BACKSLASH)
        COMBO(20, 21, &kp SLASH)
        // COMBO(21, 22, &none)

        // row 1+2
        COMBO(18, 30, &kp DOLLAR)
        COMBO(19, 31, &kp EQUAL)
        COMBO(20, 32, &kp UNDERSCORE)
        COMBO(21, 33, &kp ASTERISK)
        COMBO(22, 34, &none)

        // row 2
        // COMBO(30, 31, &none)
        COMBO(31, 32, &kp LESS_THAN)
        COMBO(32, 33, &kp GREATER_THAN)
        // COMBO(33, 34, &none)

        ////// Symmetric combos

        // row 0
        // COMBO(1, 10, &none)
        // COMBO(2, 9, &none)
        // COMBO(3, 8, &none)
        // COMBO(4, 7, &none)
        // COMBO(5, 6, &none)

        // row 1
        // COMBO(13, 22, &none)
        // COMBO(14, 21, &none)
        // COMBO(15, 20, &none)
        // COMBO(16, 19, &none)
        // COMBO(17, 18, &none)

        // row 2
        COMBO(25, 34, &tog 3) // combo_nav_layer_lock
        COMBO(26, 33, &none)
        COMBO(27, 32, &none)
        COMBO(28, 31, &none)
        COMBO(29, 30, &none)

        // thumbcluster
        COMBO(36, 41, &none)
        COMBO(37, 40, &tog 1) // combo_num_layer_lock
        COMBO(38, 39, &none)
    };
};

&soft_off {
    hold-time-ms = <2000>; // Only turn off it the key is held for 2 seconds or longer.
};

/ {
    keymap {
        compatible = "zmk,keymap";

        base {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&none  &kp Q           &kp W           &kp E               &kp R             &lt 6 T      &lt 6 Y      &kp U             &kp I               &kp O           &kp P                      &none
&none  &mt LEFT_GUI A  &mt LEFT_ALT S  &mt LEFT_CONTROL D  &mt LEFT_SHIFT F  &kp G        &kp H        &mt LEFT_SHIFT J  &mt LEFT_CONTROL K  &mt LEFT_ALT L  &mt LEFT_GUI SINGLE_QUOTE  &none
&none  &lt 3 Z         &kp X           &kp C               &kp V             &kp B        &kp N        &kp M             &kp COMMA           &kp DOT         &lt 4 GRAVE                &none
                                       &lt 5 ESCAPE        &lt 1 SPACE       &lt 2 TAB    &lt 2 ENTER  &lt 1 BACKSPACE   &lt 5 DELETE
            >;
        };

        number {
            bindings = <
&none  &none            &none            &none                &none              &none     &none   &none              &none                &none            &none            &none
&none  &mt LEFT_GUI N1  &mt LEFT_ALT N2  &mt LEFT_CONTROL N3  &mt LEFT_SHIFT N4  &kp N5    &kp N6  &mt LEFT_SHIFT N7  &mt LEFT_CONTROL N8  &mt LEFT_ALT N9  &mt LEFT_GUI N0  &none
&none  &none            &none            &none                &none              &none     &none   &none              &none                &none            &none            &none
                                         &trans               &trans             &trans    &trans  &trans             &trans
            >;
        };

        symbol {
            bindings = <
&trans  &kp AT_SIGN   &kp LEFT_PARENTHESIS       &kp RIGHT_PARENTHESIS           &kp COLON                 &kp PERIOD    &kp CARET   &kp PLUS              &kp EXCLAMATION             &kp QUESTION        &none               &trans
&trans  &kp LEFT_GUI  &mt LEFT_ALT LEFT_BRACKET  &mt LEFT_CONTROL RIGHT_BRACKET  &mt LEFT_SHIFT SEMICOLON  &kp PERIOD    &kp DOLLAR  &mt LEFT_SHIFT EQUAL  &mt LEFT_CONTROL BACKSLASH  &mt LEFT_ALT SLASH  &mt LEFT_GUI MINUS  &trans
&trans  &kp PERCENT   &kp LEFT_BRACE             &kp RIGHT_BRACE                 &kp AMPERSAND             &kp PIPE      &kp HASH    &kp ASTERISK          &kp LESS_THAN               &kp GREATER_THAN    &kp UNDERSCORE      &trans
                                                 &trans                          &trans                    &trans        &trans      &trans                &trans
            >;
        };

        basic_navigation {
            bindings = <
&none  &none  &none        &kp UP         &none      &kp C_AC_SCROLL_UP      &none   &none      &none      &none     &none     &none
&none  &none  &kp LEFT     &kp DOWN       &kp RIGHT  &kp C_AC_SCROLL_DOWN   &none   &kp LSHFT  &kp LCTRL  &kp LALT  &kp LGUI  &none
&none  &none  &kp PAGE_UP  &kp PAGE_DOWN  &kp HOME   &kp END              &none   &none      &none      &none     &none     &none
                           &trans         &trans     &tog 3               &tog 3  &trans     &trans
            >;
        };

        mouse_navigation {
            bindings = <
&none  &none  &none  &none  &none  &none    &none  &none  &none  &none  &none  &none
&none  &none  &none  &none  &none  &none    &none  &none  &none  &none  &none  &none
&none  &none  &none  &none  &none  &none    &none  &none  &none  &none  &none  &none
                     &none  &none  &none    &none  &none  &none
            >;
        };

        function {
            bindings = <
&none  &kp F1      &kp F2                      &kp F3                   &kp F4                      &kp F5             &kp F6          &kp F7                     &kp F8                         &kp F9      &kp F10           &none
&none  &kp LGUI    &mt LEFT_ALT C_VOLUME_DOWN  &mt LEFT_CONTROL K_MUTE  &mt LEFT_SHIFT C_VOLUME_UP  &kp PRINTSCREEN    &kp CAPSLOCK    &mt LEFT_SHIFT C_PREV  &mt LEFT_CONTROL C_PLAY_PAUSE  &kp C_NEXT  &mt LEFT_GUI F11  &none
&none  &kp K_UNDO  &kp K_CUT                   &kp K_COPY               &kp K_PASTE                 &none              &kp KP_NUMLOCK  &kp SCROLLLOCK             &kp K_STOP                     &none       &kp F12           &none
                                               &none                    &none                       &none              &none           &none                      &none
            >;
        };

        adjust {
            bindings = <
&none  &bt BT_DISC 0  &bt BT_DISC 1  &bt BT_DISC 2  &bt BT_DISC 3  &bt BT_DISC 4    &none  &none  &none  &none  &none  &none
&none  &bt BT_SEL 0   &bt BT_SEL 1   &bt BT_SEL 2   &bt BT_SEL 3   &bt BT_SEL 4     &none  &none  &none  &none  &none  &none
&none  &bootloader    &sys_reset    &out OUT_TOG   &bt BT_CLR     &caps_word       &none  &none  &none  &sys_reset  &bootloader  &none
                                     &none          &soft_off          &none            &none  &soft_off  &none
            >;
        };
    };
};
